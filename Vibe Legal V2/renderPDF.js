const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

class PDFRenderer {
  constructor() {
    this.browser = null;
  }

  async init() {
    if (!this.browser) {
      this.browser = await puppeteer.launch({
        headless: 'new',
        args: ['--no-sandbox', '--disable-setuid-sandbox']
      });
    }
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
      this.browser = null;
    }
  }

  markdownToHtml(markdown, title = 'Contract') {
    // Simple markdown to HTML conversion
    let html = markdown
      .replace(/^# (.+)$/gm, '<h1>$1</h1>')
      .replace(/^## (.+)$/gm, '<h2>$1</h2>')
      .replace(/^### (.+)$/gm, '<h3>$1</h3>')
      .replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.+?)\*/g, '<em>$1</em>')
      .replace(/\n\n/g, '</p><p>')
      .replace(/\n/g, '<br>');

    return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>${title}</title>
    <style>
        body {
            font-family: 'Times New Roman', serif;
            font-size: 12pt;
            line-height: 1.6;
            margin: 1in;
            color: #000;
        }
        h1 {
            font-size: 18pt;
            font-weight: bold;
            text-align: center;
            margin-bottom: 1em;
            text-transform: uppercase;
        }
        h2 {
            font-size: 14pt;
            font-weight: bold;
            margin-top: 1.5em;
            margin-bottom: 0.5em;
        }
        h3 {
            font-size: 12pt;
            font-weight: bold;
            margin-top: 1em;
            margin-bottom: 0.5em;
        }
        p {
            margin-bottom: 1em;
            text-align: justify;
        }
        .disclaimer {
            margin-top: 2em;
            padding: 1em;
            border: 1px solid #ccc;
            background-color: #f9f9f9;
            font-size: 10pt;
            text-align: center;
        }
        @page {
            margin: 1in;
        }
    </style>
</head>
<body>
    <p>${html}</p>
    <div class="disclaimer">
        <strong>LEGAL DISCLAIMER:</strong> This document is generated by AI and should be reviewed by a qualified attorney before use. This does not constitute legal advice.
    </div>
</body>
</html>`;
  }

  async renderToPDF(contractText, title = 'Contract') {
    await this.init();
    
    const page = await this.browser.newPage();
    const html = this.markdownToHtml(contractText, title);
    
    await page.setContent(html);
    
    const pdfBuffer = await page.pdf({
      format: 'A4',
      margin: {
        top: '1in',
        right: '1in',
        bottom: '1in',
        left: '1in'
      },
      printBackground: true
    });
    
    await page.close();
    
    return pdfBuffer;
  }

  async renderToFile(contractText, outputPath, title = 'Contract') {
    const pdfBuffer = await this.renderToPDF(contractText, title);
    fs.writeFileSync(outputPath, pdfBuffer);
    return outputPath;
  }
}

module.exports = PDFRenderer;

